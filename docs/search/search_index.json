{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PlayerLevels PlayerLevels is a leveling and reward system designed for Minecraft server networks. Most important features: - Configurable leveling system with XP levels - Reward system with configurable one-time and recurring rewards - Server-dependent rewards in a network - Many management commands for moderators and admins - Extensive developer API This plugin is not an all-inclusive drop-in solution for a leveling system. The plugin was designed for server networks that can integrate this plugin into existing plugins via the API or use plugins that have an integration for this plugin. By default, there is no way to earn XP as a player. This has to be done by other plugins via the API.","title":"Home"},{"location":"#playerlevels","text":"PlayerLevels is a leveling and reward system designed for Minecraft server networks. Most important features: - Configurable leveling system with XP levels - Reward system with configurable one-time and recurring rewards - Server-dependent rewards in a network - Many management commands for moderators and admins - Extensive developer API This plugin is not an all-inclusive drop-in solution for a leveling system. The plugin was designed for server networks that can integrate this plugin into existing plugins via the API or use plugins that have an integration for this plugin. By default, there is no way to earn XP as a player. This has to be done by other plugins via the API.","title":"PlayerLevels"},{"location":"api-getting-started/","text":"API: Getting started Add dependency To use the PlayerLevels API, you need to import it into your project. You can do this with gradle or maven. Gradle: repositories { // [...] maven { name = \"chaossquad-releases\" url = uri(\"https://maven.chaossquad.net/releases\") } } dependencies { // [...] compileOnly(\"net.jandie1505:PlayerLevels-API:VERSION\") } Maven: <repositories> <repository> <id>chaossquad-releases</id> <url>https://maven.chaossquad.net/releases</url> </repository> </repositories> <dependencies> <dependency> <groupId>net.jandie1505</groupId> <artifactId>PlayerLevels-API</artifactId> <version>VERSION</version> <scope>provided</scope> </dependency> </dependencies> Obtaining the API object public void onEnable() { PlayerLevelsAPI api = PlayerLevelsAPIProvider.getApi(); }","title":"Getting started"},{"location":"api-getting-started/#api-getting-started","text":"","title":"API: Getting started"},{"location":"api-getting-started/#add-dependency","text":"To use the PlayerLevels API, you need to import it into your project. You can do this with gradle or maven. Gradle: repositories { // [...] maven { name = \"chaossquad-releases\" url = uri(\"https://maven.chaossquad.net/releases\") } } dependencies { // [...] compileOnly(\"net.jandie1505:PlayerLevels-API:VERSION\") } Maven: <repositories> <repository> <id>chaossquad-releases</id> <url>https://maven.chaossquad.net/releases</url> </repository> </repositories> <dependencies> <dependency> <groupId>net.jandie1505</groupId> <artifactId>PlayerLevels-API</artifactId> <version>VERSION</version> <scope>provided</scope> </dependency> </dependencies>","title":"Add dependency"},{"location":"api-getting-started/#obtaining-the-api-object","text":"public void onEnable() { PlayerLevelsAPI api = PlayerLevelsAPIProvider.getApi(); }","title":"Obtaining the API object"},{"location":"api-players/","text":"API: Players Getting a player In PlayerLevels, players are represented by a Leveler. You can obtain a Leveler by using the LevelingManager. Player player; LevelingManager levelManager = api.getLevelManager(); // Get a cached Leveler Leveler cachedLeveler = levelManager.getLeveler(player.getUniqueId()); // If the leveler is not loaded, you can load it from the database. // Normally, the Leveler of all online players is loaded. // Since loadLeveler loads data from a database asynchronously, it returns a CompletableFuture of an Leveler. CompletableFuture<Leveler> future = levelManager.loadLeveler(player.getUniqueId()); future.thenAccept(leveler -> { // Do stuff // If you need to use the Bukkit API, you need to go back into the main thread new BukkitRunnable() { @Override public void run() { // Do Bukkit API stuff } }.runTask(plugin); }); Modifying player data Level and XP The Leveler contains the LevelerData, which stores the players leveling information. You can use this data to modify the player's level and xp: // Get the leveler's data LevelerData data = leveler.getData(); // Get/Set Level int level = data.level(); data.level(10); // Get/Set XP double xp = data.xp(); data.xp(10); Received reward entries The LevelerData also stores which rewards the player has already received. You can modify this information: // Get the leveler's data LevelerData data = leveler.getData(); // Get all received reward entries Map<String, ReceivedReward> receivedRewards = data.getReceivedRewards(); // Get one received reward entry ReceivedReward reward = data.getReceivedReward(\"my_reward\"); // Set the the reward blocked (the player will not receive the reward when it's blocked) boolean blocked = reward.blocked(); reward.blocked(true); // Set the level where the player has received the reward. // The plugin uses this information to check if the player has already received the reward. int receivedLevel = reward.level(); reward.level(10); // Reset the reward entry to the default reward entry. // A default reward entry will remove it from the database on the next sync. reward.reset(); // Deleting an entry data.removeReceivedReward(\"my_reward\"); Processing a player When PlayerLevels processes a player, this means that it checks if the player has enough xp to level up, checks if any reward can be applied to the player, updates the cached name and cleans up unused received reward entries when enabled. Normally, players are automatically processed in a specific interval. If you have changed the level or xp of a player, you should process the player manually, because if you don't, the player could see incorrect values for the next few minutes. Leveler leveler; leveler.processAsynchronously(); Cache, database and synchronization The plugin stores the player data in a MariaDB database. Since it would be very resource-heavy for the database when every command will send a request to it, PlayerLevels caches the data of all online players. To keep the data in the database up-to-date, PlayerLevels synchronizes the data every few minutes. When the player leaves, the data is also pushed to the database (and the player is removed from the cache). You can also sync the data with the database manually: Leveler leveler; leveler.syncAsynchronously(); This will return a result, which allows you to see if the sync was successful. Please note that the database always has priority. If there have been changes both in the database and locally, the data from the database is always adopted. If this happened, you will see it in the returned result. Deleting a player If you want to, you can also delete a player completely from the database and cache: UUID playerId; LevelingManager levelingManager; levelingManager.erasePlayerAsynchronously(playerId); It is recommended that the player is offline when you delete them, because if not, the plugin would just create a new Leveler instance. Events LevelUpEvet The LevelUpEvent is called when a player has been leveled up. @EventHandler public void onLevelUp(LevelUpEvent event) { Leveler leveler = event.getLeveler(); // The leveler which has leveled up int oldLevel = event.getOldLevel(); // The level before the levelup. int newLevel = event.getNewLevel(); // The new/current level } RewardApplyEvent The RewardApplyEvent is called when a reward is applied, but before the reward is applied. It can be used to manipulate if/how the reward is applied. @EventHandler public void onRewardApply(RewardApplyEvent event) { Leveler leveler = event.getLeveler(); // The leveler that receives the reward Reward reward = event.getReward(); // The reward that is applied int level = event.getLevel(); // The level the reward is applied for RewardApplyEvent.Result result = event.getResult(); // Returns the reward result event.setResult(RewardApplyEvent.Result.APPLY); // Apply the reward normally (default) event.setResult(RewardApplyEvent.Result.APPLY_SKIP); // Apply the reward, but don't mark it as applied event.setResult(RewardApplyEvent.Result.CANCEL_SKIP); // Do not apply the reward event.setResult(RewardApplyEvent.Result.CANCEL_MARK_APPLIED); // Do not apply the reward, but mark it as applied } RewardAppliedEvent The RewardAppliedEvent is called when a reward has been applied successfully. public void onRewardApply(RewardAppliedEvent event) { Leveler leveler = event.getLeveler(); // The leveler that receives the reward Reward reward = event.getReward(); // The reward that is applied int level = event.getLevel(); // The level the reward is applied for }","title":"Players"},{"location":"api-players/#api-players","text":"","title":"API: Players"},{"location":"api-players/#getting-a-player","text":"In PlayerLevels, players are represented by a Leveler. You can obtain a Leveler by using the LevelingManager. Player player; LevelingManager levelManager = api.getLevelManager(); // Get a cached Leveler Leveler cachedLeveler = levelManager.getLeveler(player.getUniqueId()); // If the leveler is not loaded, you can load it from the database. // Normally, the Leveler of all online players is loaded. // Since loadLeveler loads data from a database asynchronously, it returns a CompletableFuture of an Leveler. CompletableFuture<Leveler> future = levelManager.loadLeveler(player.getUniqueId()); future.thenAccept(leveler -> { // Do stuff // If you need to use the Bukkit API, you need to go back into the main thread new BukkitRunnable() { @Override public void run() { // Do Bukkit API stuff } }.runTask(plugin); });","title":"Getting a player"},{"location":"api-players/#modifying-player-data","text":"","title":"Modifying player data"},{"location":"api-players/#level-and-xp","text":"The Leveler contains the LevelerData, which stores the players leveling information. You can use this data to modify the player's level and xp: // Get the leveler's data LevelerData data = leveler.getData(); // Get/Set Level int level = data.level(); data.level(10); // Get/Set XP double xp = data.xp(); data.xp(10);","title":"Level and XP"},{"location":"api-players/#received-reward-entries","text":"The LevelerData also stores which rewards the player has already received. You can modify this information: // Get the leveler's data LevelerData data = leveler.getData(); // Get all received reward entries Map<String, ReceivedReward> receivedRewards = data.getReceivedRewards(); // Get one received reward entry ReceivedReward reward = data.getReceivedReward(\"my_reward\"); // Set the the reward blocked (the player will not receive the reward when it's blocked) boolean blocked = reward.blocked(); reward.blocked(true); // Set the level where the player has received the reward. // The plugin uses this information to check if the player has already received the reward. int receivedLevel = reward.level(); reward.level(10); // Reset the reward entry to the default reward entry. // A default reward entry will remove it from the database on the next sync. reward.reset(); // Deleting an entry data.removeReceivedReward(\"my_reward\");","title":"Received reward entries"},{"location":"api-players/#processing-a-player","text":"When PlayerLevels processes a player, this means that it checks if the player has enough xp to level up, checks if any reward can be applied to the player, updates the cached name and cleans up unused received reward entries when enabled. Normally, players are automatically processed in a specific interval. If you have changed the level or xp of a player, you should process the player manually, because if you don't, the player could see incorrect values for the next few minutes. Leveler leveler; leveler.processAsynchronously();","title":"Processing a player"},{"location":"api-players/#cache-database-and-synchronization","text":"The plugin stores the player data in a MariaDB database. Since it would be very resource-heavy for the database when every command will send a request to it, PlayerLevels caches the data of all online players. To keep the data in the database up-to-date, PlayerLevels synchronizes the data every few minutes. When the player leaves, the data is also pushed to the database (and the player is removed from the cache). You can also sync the data with the database manually: Leveler leveler; leveler.syncAsynchronously(); This will return a result, which allows you to see if the sync was successful. Please note that the database always has priority. If there have been changes both in the database and locally, the data from the database is always adopted. If this happened, you will see it in the returned result.","title":"Cache, database and synchronization"},{"location":"api-players/#deleting-a-player","text":"If you want to, you can also delete a player completely from the database and cache: UUID playerId; LevelingManager levelingManager; levelingManager.erasePlayerAsynchronously(playerId); It is recommended that the player is offline when you delete them, because if not, the plugin would just create a new Leveler instance.","title":"Deleting a player"},{"location":"api-players/#events","text":"","title":"Events"},{"location":"api-players/#levelupevet","text":"The LevelUpEvent is called when a player has been leveled up. @EventHandler public void onLevelUp(LevelUpEvent event) { Leveler leveler = event.getLeveler(); // The leveler which has leveled up int oldLevel = event.getOldLevel(); // The level before the levelup. int newLevel = event.getNewLevel(); // The new/current level }","title":"LevelUpEvet"},{"location":"api-players/#rewardapplyevent","text":"The RewardApplyEvent is called when a reward is applied, but before the reward is applied. It can be used to manipulate if/how the reward is applied. @EventHandler public void onRewardApply(RewardApplyEvent event) { Leveler leveler = event.getLeveler(); // The leveler that receives the reward Reward reward = event.getReward(); // The reward that is applied int level = event.getLevel(); // The level the reward is applied for RewardApplyEvent.Result result = event.getResult(); // Returns the reward result event.setResult(RewardApplyEvent.Result.APPLY); // Apply the reward normally (default) event.setResult(RewardApplyEvent.Result.APPLY_SKIP); // Apply the reward, but don't mark it as applied event.setResult(RewardApplyEvent.Result.CANCEL_SKIP); // Do not apply the reward event.setResult(RewardApplyEvent.Result.CANCEL_MARK_APPLIED); // Do not apply the reward, but mark it as applied }","title":"RewardApplyEvent"},{"location":"api-players/#rewardappliedevent","text":"The RewardAppliedEvent is called when a reward has been applied successfully. public void onRewardApply(RewardAppliedEvent event) { Leveler leveler = event.getLeveler(); // The leveler that receives the reward Reward reward = event.getReward(); // The reward that is applied int level = event.getLevel(); // The level the reward is applied for }","title":"RewardAppliedEvent"},{"location":"api-rewards/","text":"API: Rewards This part of the API can be used to manage rewards. Get the RewardsManager Rewards are stored in the RewardsManager. You can get the RewardsManager from the API object: PlayerLevelsAPI api; RewardsManager manager = api.getRewardsManager(); Managing Rewards Getting rewards From the RewardsManager, you can get, create and delete rewards: // Get all registered rewards Map<String, Reward> rewards = manager.getRewards(); // Get one reward with a specific ID Reward reward = manager.getReward(\"my_reward\"); Adding or removing rewards directly Adding or removing a reward directly is not recommended, since it can unexpected behavior. If you are creating custom rewards, register a RewardCreator to the RewardsRegistry as described in another section below. Removing Removing a reward is easy: manager.removeReward(\"my_reward\"); Adding Adding a reward directly is complicated and should be avoided. As mentioned above, use the RewardsRegistry. 1. RewardConfig First, you need a RewardConfig: RewardConfig rewardConfig = new RewardConfig(\"my_reward\", null, \"My Reward\"); 2. RewardData Then, you need a RewardData. And this is where it gets complicated. You can either completely create it on your own, or use a predefined reward. Creating RewardData manually: RewardExecutor executor = (reward, leveler, level) -> { // What your reward should do when its applied }; RewardCondition condition = null; RewardDescriptionProvider descriptionProvider = null; boolean requiresOnlinePlayer = true; // Create an interval reward data IntervalRewardData intervalData = new IntervalRewardData(executor, condition, descriptionProvider, true, 1, 1, -1); // Create a milestone reward MilestoneRewardData milestoneData = new MilestoneRewardData(executor, condition, descriptionProvider, true, 10); Using a predefined RewardData: MilestoneRewardData milestoneData = CommandReward.createMilestone(\"command\", true, CommandReward.SenderType.CONSOLE, null, 1); IntervalRewardData intervalData = CommandReward.createInterval(\"command\", true, CommandReward.SenderType.CONSOLE, 1, 1, -1); 3. Registering the reward If you have both your RewardConfig and RewardData, you can register your reward. RewardsManager manager; manager.addMilestoneReward(rewardConfig, milestoneData); manager.addIntervalReward(rewardConfig, intervalData); Custom reward types and RewardRegistry Using the RewardRegistry and custom reward types is the recommended way for creating custom rewards. Creating a custom reward type To create a custom reward type, you need to create a new class, import the necessary interfaces and implement their methods. A typical class looks like this: public class MyCustomReward implements RewardExecutor, RewardDescriptionProvider { // Here you create your reward functionality. // You can also implement RewardCondition to add a reward custom condition. private MyCustomReward() { // Your constructor } @Override public boolean onApply(@NotNull Reward reward, @NotNull Leveler leveler, int level) { // Here comes your code which is executed when the reward is applied (given) to a player. // Example: Player player = Bukkit.getPlayer(leveler.getPlayerUUID()); if (player == null) return false; player.sendRichMessage(\"<gold>You have received the following reward for reaching level \" + level + \": \" + reward.getName()); return true; } @Override public @Nullable Component getDescription(int level) { // Here comes your code for getting the description which is most likely be displayed to the user when receiving the reward. // Example: return MiniMessage.miniMessage().deserialize( \"Receiving a wonderful message for reaching level <level>\", TagResolver.resolver(\"level\", Tag.inserting(Component.text(level))) ); } // Since your reward functionality is now implemented, you need methods for creating the RewardData. // If your reward type only works as a MilestoneReward or IntervalReward, you can remove on of those methods. // For example, if you have a custom reward condition (implementing RewardCondition), the reward should not be // creatable as an IntervalReward for safety reasons. // This is called when the reward is created as MilestoneReward public static MilestoneRewardData createMilestone(int level) { MyCustomReward reward = new MyCustomReward(); return new MilestoneRewardData(reward, null, reward, true, level); } // This is called when the reward is created as IntervalReward public static IntervalRewardData createInterval(int start, int interval, int limit) { MyCustomReward reward = new MyCustomReward(); return new IntervalRewardData(reward, null, reward, true, start, interval, limit); } // Now, the reward could be created and registered directly to the RewardManager. // But as explained in the previous section, this is not a good idea. // So we now need to create a RewardCreator which can then be registered to the RewardRegistry. // The RewardCreator converts the yml config to a RewardData. public static class Creator implements RewardCreator { public Creator() {} @Override public @Nullable MilestoneRewardData createMilestoneReward(@NotNull DataStorage data) { return createMilestone(data.optInt(\"level\", 0)); } @Override public @Nullable IntervalRewardData createIntervalReward(@NotNull DataStorage data) { return createInterval(data.optInt(\"start\", 1), data.optInt(\"interval\", 1), data.optInt(\"limit\", -1)); } } // You also don't need to implement both methods here if your reward only supports Milestone or Interval. // You have now created your custom reward type. // To use it, you need to register it to the RewardRegistry. } RewardRegistry The RewardRegistry stores RewardCreators which are then converting the yml from the rewards.yml to a RewardData. You can use the RewardRegistry like that: PlayerLevelsAPI api = PlayerLevelsAPIProvider.getApi(); RewardsRegistry registry = api.getRewardsRegistry(); registry.registerCreator(\"my_custom_reward\", new MyCustomReward.Creator()); You can now create a reward with your custom reward type in the rewards.yml : test_milestone_reward: name: Milestone Test apply_type: milestone type: my_custom_reward # <-- Your custom reward type level: 10 # If you have added more attributes in your RewardCreator, you can add them here. test_interval_reward: name: Interval Test apply_type: interval type: my_custom_reward # <-- Your custom reward type start: 1 interval: 1 limit: -1 # If you have added more attributes in your RewardCreator, you can add them here.","title":"Rewards"},{"location":"api-rewards/#api-rewards","text":"This part of the API can be used to manage rewards.","title":"API: Rewards"},{"location":"api-rewards/#get-the-rewardsmanager","text":"Rewards are stored in the RewardsManager. You can get the RewardsManager from the API object: PlayerLevelsAPI api; RewardsManager manager = api.getRewardsManager();","title":"Get the RewardsManager"},{"location":"api-rewards/#managing-rewards","text":"","title":"Managing Rewards"},{"location":"api-rewards/#getting-rewards","text":"From the RewardsManager, you can get, create and delete rewards: // Get all registered rewards Map<String, Reward> rewards = manager.getRewards(); // Get one reward with a specific ID Reward reward = manager.getReward(\"my_reward\");","title":"Getting rewards"},{"location":"api-rewards/#adding-or-removing-rewards-directly","text":"Adding or removing a reward directly is not recommended, since it can unexpected behavior. If you are creating custom rewards, register a RewardCreator to the RewardsRegistry as described in another section below.","title":"Adding or removing rewards directly"},{"location":"api-rewards/#removing","text":"Removing a reward is easy: manager.removeReward(\"my_reward\");","title":"Removing"},{"location":"api-rewards/#adding","text":"Adding a reward directly is complicated and should be avoided. As mentioned above, use the RewardsRegistry.","title":"Adding"},{"location":"api-rewards/#1-rewardconfig","text":"First, you need a RewardConfig: RewardConfig rewardConfig = new RewardConfig(\"my_reward\", null, \"My Reward\");","title":"1. RewardConfig"},{"location":"api-rewards/#2-rewarddata","text":"Then, you need a RewardData. And this is where it gets complicated. You can either completely create it on your own, or use a predefined reward. Creating RewardData manually: RewardExecutor executor = (reward, leveler, level) -> { // What your reward should do when its applied }; RewardCondition condition = null; RewardDescriptionProvider descriptionProvider = null; boolean requiresOnlinePlayer = true; // Create an interval reward data IntervalRewardData intervalData = new IntervalRewardData(executor, condition, descriptionProvider, true, 1, 1, -1); // Create a milestone reward MilestoneRewardData milestoneData = new MilestoneRewardData(executor, condition, descriptionProvider, true, 10); Using a predefined RewardData: MilestoneRewardData milestoneData = CommandReward.createMilestone(\"command\", true, CommandReward.SenderType.CONSOLE, null, 1); IntervalRewardData intervalData = CommandReward.createInterval(\"command\", true, CommandReward.SenderType.CONSOLE, 1, 1, -1);","title":"2. RewardData"},{"location":"api-rewards/#3-registering-the-reward","text":"If you have both your RewardConfig and RewardData, you can register your reward. RewardsManager manager; manager.addMilestoneReward(rewardConfig, milestoneData); manager.addIntervalReward(rewardConfig, intervalData);","title":"3. Registering the reward"},{"location":"api-rewards/#custom-reward-types-and-rewardregistry","text":"Using the RewardRegistry and custom reward types is the recommended way for creating custom rewards.","title":"Custom reward types and RewardRegistry"},{"location":"api-rewards/#creating-a-custom-reward-type","text":"To create a custom reward type, you need to create a new class, import the necessary interfaces and implement their methods. A typical class looks like this: public class MyCustomReward implements RewardExecutor, RewardDescriptionProvider { // Here you create your reward functionality. // You can also implement RewardCondition to add a reward custom condition. private MyCustomReward() { // Your constructor } @Override public boolean onApply(@NotNull Reward reward, @NotNull Leveler leveler, int level) { // Here comes your code which is executed when the reward is applied (given) to a player. // Example: Player player = Bukkit.getPlayer(leveler.getPlayerUUID()); if (player == null) return false; player.sendRichMessage(\"<gold>You have received the following reward for reaching level \" + level + \": \" + reward.getName()); return true; } @Override public @Nullable Component getDescription(int level) { // Here comes your code for getting the description which is most likely be displayed to the user when receiving the reward. // Example: return MiniMessage.miniMessage().deserialize( \"Receiving a wonderful message for reaching level <level>\", TagResolver.resolver(\"level\", Tag.inserting(Component.text(level))) ); } // Since your reward functionality is now implemented, you need methods for creating the RewardData. // If your reward type only works as a MilestoneReward or IntervalReward, you can remove on of those methods. // For example, if you have a custom reward condition (implementing RewardCondition), the reward should not be // creatable as an IntervalReward for safety reasons. // This is called when the reward is created as MilestoneReward public static MilestoneRewardData createMilestone(int level) { MyCustomReward reward = new MyCustomReward(); return new MilestoneRewardData(reward, null, reward, true, level); } // This is called when the reward is created as IntervalReward public static IntervalRewardData createInterval(int start, int interval, int limit) { MyCustomReward reward = new MyCustomReward(); return new IntervalRewardData(reward, null, reward, true, start, interval, limit); } // Now, the reward could be created and registered directly to the RewardManager. // But as explained in the previous section, this is not a good idea. // So we now need to create a RewardCreator which can then be registered to the RewardRegistry. // The RewardCreator converts the yml config to a RewardData. public static class Creator implements RewardCreator { public Creator() {} @Override public @Nullable MilestoneRewardData createMilestoneReward(@NotNull DataStorage data) { return createMilestone(data.optInt(\"level\", 0)); } @Override public @Nullable IntervalRewardData createIntervalReward(@NotNull DataStorage data) { return createInterval(data.optInt(\"start\", 1), data.optInt(\"interval\", 1), data.optInt(\"limit\", -1)); } } // You also don't need to implement both methods here if your reward only supports Milestone or Interval. // You have now created your custom reward type. // To use it, you need to register it to the RewardRegistry. }","title":"Creating a custom reward type"},{"location":"api-rewards/#rewardregistry","text":"The RewardRegistry stores RewardCreators which are then converting the yml from the rewards.yml to a RewardData. You can use the RewardRegistry like that: PlayerLevelsAPI api = PlayerLevelsAPIProvider.getApi(); RewardsRegistry registry = api.getRewardsRegistry(); registry.registerCreator(\"my_custom_reward\", new MyCustomReward.Creator()); You can now create a reward with your custom reward type in the rewards.yml : test_milestone_reward: name: Milestone Test apply_type: milestone type: my_custom_reward # <-- Your custom reward type level: 10 # If you have added more attributes in your RewardCreator, you can add them here. test_interval_reward: name: Interval Test apply_type: interval type: my_custom_reward # <-- Your custom reward type start: 1 interval: 1 limit: -1 # If you have added more attributes in your RewardCreator, you can add them here.","title":"RewardRegistry"},{"location":"commands/","text":"Command Reference The plugin has many commands. Here is an overview for all of them. Structure This is the full command structure of the plugin: /levels info (get level of other players) top (show toplist) milestones (show list of milestone rewards) manage (management commands for moderators/admins) players (manage players) info (get player info) level (see/modify player level) xp (see/modify player xp) rewards (see/modify received rewards) cached-name (see/reset cached name) sync (sync with database) process (update player's values) erase (erase player from database) rewards (manage rewards) info (get info about reward) list (show all rewards) enable (enable/disable rewards) reload (reload rewards) debug (debug commands for admins) cache (modify the cache) config (change config values) database (manage database connection) messages (change message values) info (get plugin information) reload (reload config/messages) As you can see, this is a huge number of commands. But you most likely only need a small amount of them. Player commands These commands are for normal players: Command Permission Use case /level none Show own leveling progress. /level info <player> playerlevels.command.info.view_other Show level of other players. /level top [page] playerlevels.command.toplist View the toplist. /level milestones playerlevels.command.rewards View a list of all milestones. Management commands Players These commands are there for managing players: Action Command Player Info /levels manage players info <player> [--use-cache] Manage level /levels manage players level (get <player>\\|set <level> <level>) [--use-cache\\|--push=(true\\|false)\\|--no-process] Manage XP /levels xp (get <player>\\|set <player> <xp>\\|give <player> <xp>\\|take <player> <xp>) [--use-cache\\|--push=(true\\|false)\\|--no-process] Manage player's received rewards /levels manage players rewards <player> (list\\|get <reward>\\|set <reward> (blocked\\|level) <value>\\|reset <reward>\\|delete <reward>) [--use-cache\\|--push=(true\\|false)\\|--no-process] Manage Cached Name /levels manage players cached-name <player> (get\\|clear) [--use-cache\\|--push=(true\\|false)\\|--no-process] Manually process player /levels manage players update <player> [--use-cache\\|--push=(true\\|false)] Manually sync player with database /levels manage players sync <player> Erase player from database /levels manage players erase <player> All those commands have the permission playerlevels.manage_players . You might have already noticed that those commands support some command options: Option Description --use-cache Most management commands will synchronize with the database before doing their stuff. If you don't want that, use this option. --push=(true\\|false) Most management commands will push their changes to the database immediately when they are done. If you don't want that, set this option to false. --no-process Most management commands will process (update) the player when they are done. Use this option if you don't want that. Rewards Those commands are for there for managing rewards: Action Description List rewards /levels manage rewards list Get reward info /levels manage rewards info <id> Reload rewards from rewards.yml /levels manage rewards reload Enable/Disable reward /levels rewards enable <id> (true\\|false) All those commands have the permission playerlevels.manage_rewards . Debug commands These commands are for debugging purposes: Action Description Show and modify cache: /levels debug cache (list\\|refresh\\|drop <player> [--no-process\\|--confirm]\\|drop-all [--no-process\\|--confirm]) Modify config: /levels debug config (list [section]\\|get <key>\\|set <key> <type> <value>) Manage database connection: /levels debug database (connect\\|disconnect\\|info) Modify messages config: /levels debug messages (list [section]\\|get <key>\\|set <key> <type> <value>) Reload config from files: /levels debug reload (config\\|messages> [--clear=(true\\|false)\\|--merge-defaults=(true\\|false)] View plugin info: /levels debug info The permission of those commands is playerlevels.debug . Don't use them if you don't know what you're doing. Overview of the available command options: Option Description --no-process Same as in player management command. --confirm Confirms dangerous operations. --clear For reload command: Clears the config before merging the config file values into it. --merge-default=(true\\|false) For reload command: If the default values should be merged into the config before merging the config file values into it.","title":"Commands"},{"location":"commands/#command-reference","text":"The plugin has many commands. Here is an overview for all of them.","title":"Command Reference"},{"location":"commands/#structure","text":"This is the full command structure of the plugin: /levels info (get level of other players) top (show toplist) milestones (show list of milestone rewards) manage (management commands for moderators/admins) players (manage players) info (get player info) level (see/modify player level) xp (see/modify player xp) rewards (see/modify received rewards) cached-name (see/reset cached name) sync (sync with database) process (update player's values) erase (erase player from database) rewards (manage rewards) info (get info about reward) list (show all rewards) enable (enable/disable rewards) reload (reload rewards) debug (debug commands for admins) cache (modify the cache) config (change config values) database (manage database connection) messages (change message values) info (get plugin information) reload (reload config/messages) As you can see, this is a huge number of commands. But you most likely only need a small amount of them.","title":"Structure"},{"location":"commands/#player-commands","text":"These commands are for normal players: Command Permission Use case /level none Show own leveling progress. /level info <player> playerlevels.command.info.view_other Show level of other players. /level top [page] playerlevels.command.toplist View the toplist. /level milestones playerlevels.command.rewards View a list of all milestones.","title":"Player commands"},{"location":"commands/#management-commands","text":"","title":"Management commands"},{"location":"commands/#players","text":"These commands are there for managing players: Action Command Player Info /levels manage players info <player> [--use-cache] Manage level /levels manage players level (get <player>\\|set <level> <level>) [--use-cache\\|--push=(true\\|false)\\|--no-process] Manage XP /levels xp (get <player>\\|set <player> <xp>\\|give <player> <xp>\\|take <player> <xp>) [--use-cache\\|--push=(true\\|false)\\|--no-process] Manage player's received rewards /levels manage players rewards <player> (list\\|get <reward>\\|set <reward> (blocked\\|level) <value>\\|reset <reward>\\|delete <reward>) [--use-cache\\|--push=(true\\|false)\\|--no-process] Manage Cached Name /levels manage players cached-name <player> (get\\|clear) [--use-cache\\|--push=(true\\|false)\\|--no-process] Manually process player /levels manage players update <player> [--use-cache\\|--push=(true\\|false)] Manually sync player with database /levels manage players sync <player> Erase player from database /levels manage players erase <player> All those commands have the permission playerlevels.manage_players . You might have already noticed that those commands support some command options: Option Description --use-cache Most management commands will synchronize with the database before doing their stuff. If you don't want that, use this option. --push=(true\\|false) Most management commands will push their changes to the database immediately when they are done. If you don't want that, set this option to false. --no-process Most management commands will process (update) the player when they are done. Use this option if you don't want that.","title":"Players"},{"location":"commands/#rewards","text":"Those commands are for there for managing rewards: Action Description List rewards /levels manage rewards list Get reward info /levels manage rewards info <id> Reload rewards from rewards.yml /levels manage rewards reload Enable/Disable reward /levels rewards enable <id> (true\\|false) All those commands have the permission playerlevels.manage_rewards .","title":"Rewards"},{"location":"commands/#debug-commands","text":"These commands are for debugging purposes: Action Description Show and modify cache: /levels debug cache (list\\|refresh\\|drop <player> [--no-process\\|--confirm]\\|drop-all [--no-process\\|--confirm]) Modify config: /levels debug config (list [section]\\|get <key>\\|set <key> <type> <value>) Manage database connection: /levels debug database (connect\\|disconnect\\|info) Modify messages config: /levels debug messages (list [section]\\|get <key>\\|set <key> <type> <value>) Reload config from files: /levels debug reload (config\\|messages> [--clear=(true\\|false)\\|--merge-defaults=(true\\|false)] View plugin info: /levels debug info The permission of those commands is playerlevels.debug . Don't use them if you don't know what you're doing. Overview of the available command options: Option Description --no-process Same as in player management command. --confirm Confirms dangerous operations. --clear For reload command: Clears the config before merging the config file values into it. --merge-default=(true\\|false) For reload command: If the default values should be merged into the config before merging the config file values into it.","title":"Debug commands"},{"location":"installation/","text":"Setup and Installation Requirements One or multiple PaperMC (1.19+) servers. MariaDB (or MySQL) database. Installation Download the plugin and put it into your plugins directory. (Re)start the server. Open config.yml and enter your database credentials. If you don't know how to do this, read the next chapter. Restart the server again or reload the config using /levels debug reload config If you see no error in the console, the database connection should be established successfully. You can use /levels debug database info to check it if you want to make sure. Start using the plugin Simple database setup This guide is for Linux. If you use a Windows server and, you are on your own (and btw, you shouldn't use Windows for servers unless you are a masochist). Install MariaDB: sudo apt install mariadb-server mariadb-client or sudo dnf install mariadb-server . Let it start on OS startup: sudo systemctl enable --now mariadb Start MariaDB setup: sudo mariadb_secure_installation . Answer the questions you're getting asked. Don't create security risks here. Disallow remote root login, select a password, remove test database, etc... Open MariaDB console: sudo mariadb -u root . As the root user on the OS, you can log into MariaDB without a root password. Create a database for PlayerLevels: CREATE DATABASE playerlevels; Create a user for PlayerLevels: CREATE USER 'db_playerlevels'@'localhost' IDENTIFIED BY 'your secure password' . Do not use the root user for PlayerLevels! Grant privileges: GRANT ALL PRIVILEGES ON db_playerlevels TO 'db_playerlevels'@'localhost'; and FLUSH PRIVILEGES; . Enter the credentials. In this example, db_playerlevels is your user, your secure password your password, 3306 your port and playerlevels your database. If you are using MySQL, it should be mostly the same, but I would recommend you to use MariaDB since my plugin is developed against that. Next steps Choose xp formula: You might not like the default xp formula, so change it. Add some rewards and remove the default one. Set server ids for your servers. Change the plugin messages or disable some by replacing the message string with \"\" . Read the documentation to learn more about the plugin.","title":"Installation"},{"location":"installation/#setup-and-installation","text":"","title":"Setup and Installation"},{"location":"installation/#requirements","text":"One or multiple PaperMC (1.19+) servers. MariaDB (or MySQL) database.","title":"Requirements"},{"location":"installation/#installation","text":"Download the plugin and put it into your plugins directory. (Re)start the server. Open config.yml and enter your database credentials. If you don't know how to do this, read the next chapter. Restart the server again or reload the config using /levels debug reload config If you see no error in the console, the database connection should be established successfully. You can use /levels debug database info to check it if you want to make sure. Start using the plugin","title":"Installation"},{"location":"installation/#simple-database-setup","text":"This guide is for Linux. If you use a Windows server and, you are on your own (and btw, you shouldn't use Windows for servers unless you are a masochist). Install MariaDB: sudo apt install mariadb-server mariadb-client or sudo dnf install mariadb-server . Let it start on OS startup: sudo systemctl enable --now mariadb Start MariaDB setup: sudo mariadb_secure_installation . Answer the questions you're getting asked. Don't create security risks here. Disallow remote root login, select a password, remove test database, etc... Open MariaDB console: sudo mariadb -u root . As the root user on the OS, you can log into MariaDB without a root password. Create a database for PlayerLevels: CREATE DATABASE playerlevels; Create a user for PlayerLevels: CREATE USER 'db_playerlevels'@'localhost' IDENTIFIED BY 'your secure password' . Do not use the root user for PlayerLevels! Grant privileges: GRANT ALL PRIVILEGES ON db_playerlevels TO 'db_playerlevels'@'localhost'; and FLUSH PRIVILEGES; . Enter the credentials. In this example, db_playerlevels is your user, your secure password your password, 3306 your port and playerlevels your database. If you are using MySQL, it should be mostly the same, but I would recommend you to use MariaDB since my plugin is developed against that.","title":"Simple database setup"},{"location":"installation/#next-steps","text":"Choose xp formula: You might not like the default xp formula, so change it. Add some rewards and remove the default one. Set server ids for your servers. Change the plugin messages or disable some by replacing the message string with \"\" . Read the documentation to learn more about the plugin.","title":"Next steps"},{"location":"integrations-cloudnet/","text":"CloudNet Integration The CloudNet Integration automatically sets the PlayerLevels server_id to the current task name. Installation Download the PlayerLevels-CloudNet plugin. Put the Plugin into the same template as your PlayerLevels plugin. Restart the servers which are using the template. Usage The plugin does everything for you, just install it, and it will work. Recommended setup Create a new PlayerLevels template Put PlayerLevels (and its config files) and PlayerLevels-CloudNet into its plugins directory. Add the template to all tasks that should have PlayerLevels available.","title":"CloudNet"},{"location":"integrations-cloudnet/#cloudnet-integration","text":"The CloudNet Integration automatically sets the PlayerLevels server_id to the current task name.","title":"CloudNet Integration"},{"location":"integrations-cloudnet/#installation","text":"Download the PlayerLevels-CloudNet plugin. Put the Plugin into the same template as your PlayerLevels plugin. Restart the servers which are using the template.","title":"Installation"},{"location":"integrations-cloudnet/#usage","text":"The plugin does everything for you, just install it, and it will work.","title":"Usage"},{"location":"integrations-cloudnet/#recommended-setup","text":"Create a new PlayerLevels template Put PlayerLevels (and its config files) and PlayerLevels-CloudNet into its plugins directory. Add the template to all tasks that should have PlayerLevels available.","title":"Recommended setup"},{"location":"integrations-placeholderapi/","text":"PlaceholderAPI Integration PlayerLevels supports PlaceholderAPI. Installation PlaceholderAPI support is not integrated in the core plugin. You need to install a PlaceholderAPI expansion: Download the PlaceholderAPI expansion JAR file. Put the expansion file into plugins/PlaceholderAPI/expansions/ . Restart the server. Placeholders All Placeholders have the Prefix playerlevels_ . So for example, level in the table means playerlevels_levels on the server. Value Placeholder Description Player Level level The player's level Player XP (current level) xp The XP the player has on the current level Player XP (current level, formatted) xp_formatted xp , but formatted (like 1.2K or 2,5M) Player XP (total) total_xp The XP the player has in total (XP for all previous levels + current XP) Player XP (total, formatted) total_xp_formatted total_xp , but formatted (like 3.4K or 5.1M) Player UUID uuid The UUId of the player Player Name (cached name) name The cached name of the player Player's next level level_next The next level the player will reach (it's just level + 1 ) XP of the player's level xp_current_level The amount of XP of the player's current level (not the player's XP) XP of the player's level (formatted) xp_current_level_formatted xp_current_level , but formatted (like 3.4K or 5.1M) XP of the player's next level xp_next_level The amount of XP of the player's next level (not the player's XP) XP of the player's next level (formatted) xp_next_level_formatted xp_next_level , but formatted (like 3.4K or 5.1M) XP between player's level and next level xp_to_next_level The amount of XP of the player's level to the player's next level XP between player's level and next level (formatted) xp_to_next_level_formatted xp_to_next_level , but formatted (like 3.4K or 5.1M) Remaining XP to the next level xp_remaining The amount of XP the player needs to get to level up Remaining XP to the next level (formatted) xp_remaining_formatted xp_remaining , but formatted (like 3.4K or 5.1M) You can also use all player's placeholders for the toplist, by adding toplist_PLACE_ as prefix for the placeholder. So if you want the level of the first player on the toplist, use playerlevels_toplist_1_level as a placeholder.","title":"PlaceholderAPI"},{"location":"integrations-placeholderapi/#placeholderapi-integration","text":"PlayerLevels supports PlaceholderAPI.","title":"PlaceholderAPI Integration"},{"location":"integrations-placeholderapi/#installation","text":"PlaceholderAPI support is not integrated in the core plugin. You need to install a PlaceholderAPI expansion: Download the PlaceholderAPI expansion JAR file. Put the expansion file into plugins/PlaceholderAPI/expansions/ . Restart the server.","title":"Installation"},{"location":"integrations-placeholderapi/#placeholders","text":"All Placeholders have the Prefix playerlevels_ . So for example, level in the table means playerlevels_levels on the server. Value Placeholder Description Player Level level The player's level Player XP (current level) xp The XP the player has on the current level Player XP (current level, formatted) xp_formatted xp , but formatted (like 1.2K or 2,5M) Player XP (total) total_xp The XP the player has in total (XP for all previous levels + current XP) Player XP (total, formatted) total_xp_formatted total_xp , but formatted (like 3.4K or 5.1M) Player UUID uuid The UUId of the player Player Name (cached name) name The cached name of the player Player's next level level_next The next level the player will reach (it's just level + 1 ) XP of the player's level xp_current_level The amount of XP of the player's current level (not the player's XP) XP of the player's level (formatted) xp_current_level_formatted xp_current_level , but formatted (like 3.4K or 5.1M) XP of the player's next level xp_next_level The amount of XP of the player's next level (not the player's XP) XP of the player's next level (formatted) xp_next_level_formatted xp_next_level , but formatted (like 3.4K or 5.1M) XP between player's level and next level xp_to_next_level The amount of XP of the player's level to the player's next level XP between player's level and next level (formatted) xp_to_next_level_formatted xp_to_next_level , but formatted (like 3.4K or 5.1M) Remaining XP to the next level xp_remaining The amount of XP the player needs to get to level up Remaining XP to the next level (formatted) xp_remaining_formatted xp_remaining , but formatted (like 3.4K or 5.1M) You can also use all player's placeholders for the toplist, by adding toplist_PLACE_ as prefix for the placeholder. So if you want the level of the first player on the toplist, use playerlevels_toplist_1_level as a placeholder.","title":"Placeholders"},{"location":"leveling/","text":"Leveling One of the two major features of the plugin is leveling. How it works Players can earn XP. Using the xp formula, this xp is \"transformed\" into levels. If a player reaches enough xp, the player levels up. That's mostly everything about the leveling system. Player interaction Players can see their current leveling progress using the /level -command. If enabled in config, players can also see the level of other players by doing /level info <player> . You can customize the messages of those outputs in the config. If the expansion is installed, you can also use placeholders using PlaceholderAPI to show players their levels. Toplist The plugin has a level toplist. Players can view the toplist using the /level top command. You can specify the length of the toplist in the configuration. If the expansion is installed, you can also show the toplist in placeholders. Leveling as a player The plugin has no built-in way for players to earn xp. This choice has been made on purpose, since this plugin is designed to be integrated into other plugins. To earn XP, other plugins like your minigames need to give XP to the players using the API. If you are a developer who wants to integrate PlayerLevels into their plugin, read the API documentation. Management PlayerLevels has many management commands. Here are some, you will find all of them in the command reference: - Get player information: /level manage players info <player> - Set level: /level manage players level set <player> <value> - Set xp: /level manage players xp set <player> <value> - Give xp: /level manage players xp give <player> <amount>","title":"Leveling"},{"location":"leveling/#leveling","text":"One of the two major features of the plugin is leveling.","title":"Leveling"},{"location":"leveling/#how-it-works","text":"Players can earn XP. Using the xp formula, this xp is \"transformed\" into levels. If a player reaches enough xp, the player levels up. That's mostly everything about the leveling system.","title":"How it works"},{"location":"leveling/#player-interaction","text":"Players can see their current leveling progress using the /level -command. If enabled in config, players can also see the level of other players by doing /level info <player> . You can customize the messages of those outputs in the config. If the expansion is installed, you can also use placeholders using PlaceholderAPI to show players their levels.","title":"Player interaction"},{"location":"leveling/#toplist","text":"The plugin has a level toplist. Players can view the toplist using the /level top command. You can specify the length of the toplist in the configuration. If the expansion is installed, you can also show the toplist in placeholders.","title":"Toplist"},{"location":"leveling/#leveling-as-a-player","text":"The plugin has no built-in way for players to earn xp. This choice has been made on purpose, since this plugin is designed to be integrated into other plugins. To earn XP, other plugins like your minigames need to give XP to the players using the API. If you are a developer who wants to integrate PlayerLevels into their plugin, read the API documentation.","title":"Leveling as a player"},{"location":"leveling/#management","text":"PlayerLevels has many management commands. Here are some, you will find all of them in the command reference: - Get player information: /level manage players info <player> - Set level: /level manage players level set <player> <value> - Set xp: /level manage players xp set <player> <value> - Give xp: /level manage players xp give <player> <amount>","title":"Management"},{"location":"rewards/","text":"Rewards The second of the two major features is the reward system. How it works Rewards are \"actions\" which are applied to a player when that player reaches a specific level. There are several types of rewards, and more can be added using the API. Rewards can either be applied a single time when reaching a specific level or multiple times in a specific interval. Components of a reward This section explains what a reward consists of. All rewards Every reward has these components. Reward ID This is the unique identifier of a reward. It is not shown to the user and has to be unique. Reward Name The name of the reward. This name is normally shown to the user when unlocking the reward or in a list of all rewards. Server ID The server ID on which the reward should unlock. Rewards then will only unlock on servers with this specific ID. If there is no server ID set, the reward will unlock on all servers. This feature is intended for networks where not all plugins are available on all servers. Example: A player levels up on a server of Gamemode A. This levelup contains a reward for Gamemode B, but the plugin of Gamemode B is not available on the server of Gamemode A. If no server ID is set, giving the reward would fail. Therefore, you can set the server ID of that reward to the servers of Gamemode B. PlayerLevels will then wait giving the Player the reward until that player joins onto a server of Gamemode B. Reward Apply-Type The apply-type of a reward determines when a reward is applied. There are two apply types: - Milestone Reward: Those rewards will only be given once when the player reaches a specific level. - Interval rewards: Those rewards will be applied in a specific interval, with an optional staring and ending point. You will find out more about this in the next section. Description The reward description is provided by the reward type you have selected, but most of the reward types let you set as you want. Some reward types allow the usage of placeholders in the description. This allows you for example the amount of points you just earned. If you are a developer, this is not a description text. This is a RewardDescriptionProvider, with which you can dynamically provide reward descriptions on a per-player basis. Player Online Requirement This sets if the player needs to be online for the reward can be given. It is mostly irrelevant because it is up to the reward type and players are not loaded when being offline under normal circumstances. But this option exists, and now you know it. Reward Type (Reward Executor) The reward type is the actual thing that is done when the player unlocks the reward. You can find more information about this in the section about the default reward types. If you are a developer, this is not a reward type. It is a reward executor, which contains the code that is executed when the player unlocks the reward. Milestone Rewards Only milestone rewards have these components. Level The level where the milestone reward is applied. For example when the level of a milestone reward is set to 10 and a player reaches level 10, the reward is applied. After this, the reward is not applied again (except the specific reward uses a custom condition). Custom Condition Milestone rewards can have custom conditions. Those custom conditions can determine unter which circumstances can be given again, even if the reward has already been given. Having this depends on the reward type you are using. Most reward types don't need this. If you are a developer, you can make use of this feature for your custom rewards. Interval Rewards Only interval rewards have these components. Interval The interval in which the reward is given to the player. For example, if the interval is set to 10, the reward will be given to players on level 11, 21, 31, 41, etc... (when the start is set to level 1). Start The level where the interval is started. For example, if you have a reward with an interval of 10 and the start is set to 20, the reward will be given the first time on level 20, and then on 30, 40, 50, etc... Limit The level over which the reward is no longer applied. For example, if the interval is set to 10 and the limit to 50, the reward will only unlock on the levels 11, 21, 31 and 41, but NOT on 51, 61, etc... Configuration Rewards can be configured in the rewards.yml configuration file. Milestone reward test_milestone_reward: # <-- The reward ID. Has to be unique. name: Test Reward # <-- The reward name that is displayed to the players. apply_type: milestone # <-- The apply-type. In this case, it's 'milestone', because we want to add a milestone reward. level: 10 # <-- The level the reward is applied on. type: my_reward_type # <-- The reward type. # [Reward-specific settings will come here] Interval reward test_milestone_reward: # <-- The reward ID. Has to be unique. name: Test Reward # <-- The reward name that is displayed to the players. apply_type: interval # <-- The apply-type. In this case, it's 'interval', because we want to add an interval reward. start: 10 # <-- The start point of the intervals. interval: 1 # <-- The interval in which the reward is applied. limit: -1 # <-- The limit after which the reward will no longer be applied. type: my_reward_type # <-- The reward type. # [Reward-specific settings will come here] Reward types Default types Command A command reward is the simplest reward type. It just executes a command when the reward is applied. You can configure it like this: test_command_reward: # [...] type: command # <-- Set command as the reward type command: \"say Reward: {reward_name}, Player: {player_name}, Level: {player_reward_level}\" # <-- The command to run sender_type: console # <-- The sender type (console or player) description: \"My wonderful reward description\" # <-- The reward description. This reward type can be added as a milestone and as an interval reward. LuckPerms This reward type gives a permission to the player when the reward is unlocked. You can configure it like this: test_luckperms_reward: # [...] type: luckperms # <-- Set luckperms as the reward type. permission: \"my_permission\" # <-- The permission that should be given to the player. description: \"My Description\" # <-- The reward description. This reward can only be added as a milestone reward. This reward uses a custom apply-condition. If the player has unlocked this reward, PlayerLevels will check if the player has the permission. If the player does not have the permission, it will be given (again), even if the player has unlocked the reward previously and not in this moment. PlayerPoints This reward type gives a player some points using PlayerPoints. You can configure it like this: test_playerpoints_reward: # [...] type: playerpoints # <-- Use playerpoints as the reward type formula: level * 10 # <-- The formula that determines how much points the player will get. Available Variables: level, xp description: \"<gray>+ <points> points\" # <-- The reward description. Supports minimessage and the <points> placeholder. This reward type can be added as a milestone and as an interval reward. Custom rewards Other plugins can add custom rewards using the API. If a plugin registers a custom reward type, you can just configure it like the default rewards: test_custom_reward: # [...] type: my_custom_type # <-- Use the type id of the custom reward here # [Options of the custom reward] If you are a developer who wants to add a custom reward type, you can find out more in the developer documentation. Manage rewards You can also manage rewards using a command. But it is not as powerful as the player management command. Here are some examples: - List rewards: /levels manage rewards list - Get reward info: /levels manage rewards info <id> - Reload rewards.yml: /levels manage rewards reload - Enable/disable reward (not permanent, only for current server): /levels rewards enable <id> true/false","title":"Rewards"},{"location":"rewards/#rewards","text":"The second of the two major features is the reward system.","title":"Rewards"},{"location":"rewards/#how-it-works","text":"Rewards are \"actions\" which are applied to a player when that player reaches a specific level. There are several types of rewards, and more can be added using the API. Rewards can either be applied a single time when reaching a specific level or multiple times in a specific interval.","title":"How it works"},{"location":"rewards/#components-of-a-reward","text":"This section explains what a reward consists of.","title":"Components of a reward"},{"location":"rewards/#all-rewards","text":"Every reward has these components.","title":"All rewards"},{"location":"rewards/#reward-id","text":"This is the unique identifier of a reward. It is not shown to the user and has to be unique.","title":"Reward ID"},{"location":"rewards/#reward-name","text":"The name of the reward. This name is normally shown to the user when unlocking the reward or in a list of all rewards.","title":"Reward Name"},{"location":"rewards/#server-id","text":"The server ID on which the reward should unlock. Rewards then will only unlock on servers with this specific ID. If there is no server ID set, the reward will unlock on all servers. This feature is intended for networks where not all plugins are available on all servers. Example: A player levels up on a server of Gamemode A. This levelup contains a reward for Gamemode B, but the plugin of Gamemode B is not available on the server of Gamemode A. If no server ID is set, giving the reward would fail. Therefore, you can set the server ID of that reward to the servers of Gamemode B. PlayerLevels will then wait giving the Player the reward until that player joins onto a server of Gamemode B.","title":"Server ID"},{"location":"rewards/#reward-apply-type","text":"The apply-type of a reward determines when a reward is applied. There are two apply types: - Milestone Reward: Those rewards will only be given once when the player reaches a specific level. - Interval rewards: Those rewards will be applied in a specific interval, with an optional staring and ending point. You will find out more about this in the next section.","title":"Reward Apply-Type"},{"location":"rewards/#description","text":"The reward description is provided by the reward type you have selected, but most of the reward types let you set as you want. Some reward types allow the usage of placeholders in the description. This allows you for example the amount of points you just earned. If you are a developer, this is not a description text. This is a RewardDescriptionProvider, with which you can dynamically provide reward descriptions on a per-player basis.","title":"Description"},{"location":"rewards/#player-online-requirement","text":"This sets if the player needs to be online for the reward can be given. It is mostly irrelevant because it is up to the reward type and players are not loaded when being offline under normal circumstances. But this option exists, and now you know it.","title":"Player Online Requirement"},{"location":"rewards/#reward-type-reward-executor","text":"The reward type is the actual thing that is done when the player unlocks the reward. You can find more information about this in the section about the default reward types. If you are a developer, this is not a reward type. It is a reward executor, which contains the code that is executed when the player unlocks the reward.","title":"Reward Type (Reward Executor)"},{"location":"rewards/#milestone-rewards","text":"Only milestone rewards have these components.","title":"Milestone Rewards"},{"location":"rewards/#level","text":"The level where the milestone reward is applied. For example when the level of a milestone reward is set to 10 and a player reaches level 10, the reward is applied. After this, the reward is not applied again (except the specific reward uses a custom condition).","title":"Level"},{"location":"rewards/#custom-condition","text":"Milestone rewards can have custom conditions. Those custom conditions can determine unter which circumstances can be given again, even if the reward has already been given. Having this depends on the reward type you are using. Most reward types don't need this. If you are a developer, you can make use of this feature for your custom rewards.","title":"Custom Condition"},{"location":"rewards/#interval-rewards","text":"Only interval rewards have these components.","title":"Interval Rewards"},{"location":"rewards/#interval","text":"The interval in which the reward is given to the player. For example, if the interval is set to 10, the reward will be given to players on level 11, 21, 31, 41, etc... (when the start is set to level 1).","title":"Interval"},{"location":"rewards/#start","text":"The level where the interval is started. For example, if you have a reward with an interval of 10 and the start is set to 20, the reward will be given the first time on level 20, and then on 30, 40, 50, etc...","title":"Start"},{"location":"rewards/#limit","text":"The level over which the reward is no longer applied. For example, if the interval is set to 10 and the limit to 50, the reward will only unlock on the levels 11, 21, 31 and 41, but NOT on 51, 61, etc...","title":"Limit"},{"location":"rewards/#configuration","text":"Rewards can be configured in the rewards.yml configuration file.","title":"Configuration"},{"location":"rewards/#milestone-reward","text":"test_milestone_reward: # <-- The reward ID. Has to be unique. name: Test Reward # <-- The reward name that is displayed to the players. apply_type: milestone # <-- The apply-type. In this case, it's 'milestone', because we want to add a milestone reward. level: 10 # <-- The level the reward is applied on. type: my_reward_type # <-- The reward type. # [Reward-specific settings will come here]","title":"Milestone reward"},{"location":"rewards/#interval-reward","text":"test_milestone_reward: # <-- The reward ID. Has to be unique. name: Test Reward # <-- The reward name that is displayed to the players. apply_type: interval # <-- The apply-type. In this case, it's 'interval', because we want to add an interval reward. start: 10 # <-- The start point of the intervals. interval: 1 # <-- The interval in which the reward is applied. limit: -1 # <-- The limit after which the reward will no longer be applied. type: my_reward_type # <-- The reward type. # [Reward-specific settings will come here]","title":"Interval reward"},{"location":"rewards/#reward-types","text":"","title":"Reward types"},{"location":"rewards/#default-types","text":"","title":"Default types"},{"location":"rewards/#command","text":"A command reward is the simplest reward type. It just executes a command when the reward is applied. You can configure it like this: test_command_reward: # [...] type: command # <-- Set command as the reward type command: \"say Reward: {reward_name}, Player: {player_name}, Level: {player_reward_level}\" # <-- The command to run sender_type: console # <-- The sender type (console or player) description: \"My wonderful reward description\" # <-- The reward description. This reward type can be added as a milestone and as an interval reward.","title":"Command"},{"location":"rewards/#luckperms","text":"This reward type gives a permission to the player when the reward is unlocked. You can configure it like this: test_luckperms_reward: # [...] type: luckperms # <-- Set luckperms as the reward type. permission: \"my_permission\" # <-- The permission that should be given to the player. description: \"My Description\" # <-- The reward description. This reward can only be added as a milestone reward. This reward uses a custom apply-condition. If the player has unlocked this reward, PlayerLevels will check if the player has the permission. If the player does not have the permission, it will be given (again), even if the player has unlocked the reward previously and not in this moment.","title":"LuckPerms"},{"location":"rewards/#playerpoints","text":"This reward type gives a player some points using PlayerPoints. You can configure it like this: test_playerpoints_reward: # [...] type: playerpoints # <-- Use playerpoints as the reward type formula: level * 10 # <-- The formula that determines how much points the player will get. Available Variables: level, xp description: \"<gray>+ <points> points\" # <-- The reward description. Supports minimessage and the <points> placeholder. This reward type can be added as a milestone and as an interval reward.","title":"PlayerPoints"},{"location":"rewards/#custom-rewards","text":"Other plugins can add custom rewards using the API. If a plugin registers a custom reward type, you can just configure it like the default rewards: test_custom_reward: # [...] type: my_custom_type # <-- Use the type id of the custom reward here # [Options of the custom reward] If you are a developer who wants to add a custom reward type, you can find out more in the developer documentation.","title":"Custom rewards"},{"location":"rewards/#manage-rewards","text":"You can also manage rewards using a command. But it is not as powerful as the player management command. Here are some examples: - List rewards: /levels manage rewards list - Get reward info: /levels manage rewards info <id> - Reload rewards.yml: /levels manage rewards reload - Enable/disable reward (not permanent, only for current server): /levels rewards enable <id> true/false","title":"Manage rewards"}]}